{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/haowang/Desktop/Cloud_Computing/frontend/node_modules/@babel/runtime/regenerator\");\n\nrequire(\"@babel/polyfill\");\n\nvar _airport = _interopRequireDefault(require(\"./airport.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n} // Development Link :\n// https://cdn.rawgit.com/konsalex/Airport-Autocomplete-JS/3dbde72e/src/airports.json\n// Should generate new link everytime for production?\n\n\nvar AIRPORT_URL = 'https://raw.githubusercontent.com/konsalex/Airport-Autocomplete-JS/master/src/data/airports.json';\nvar airports;\nvar fetchTries = false;\nvar pending = true; ///////////////////////////////\n// Airport Autocomplete //////\n//////////////////////////////\n// Fuse Option. We should enable user to override parameters for this!\n\nvar options = {\n  shouldSort: true,\n  threshold: 0.4,\n  maxPatternLength: 32,\n  keys: [{\n    name: 'IATA',\n    weight: 0.6\n  }, {\n    name: 'name',\n    weight: 0.4\n  }, {\n    name: 'city',\n    weight: 0.2\n  }]\n};\n\nfunction AirportInput(_x) {\n  return _AirportInput.apply(this, arguments);\n}\n\nfunction _AirportInput() {\n  _AirportInput = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(id) {\n    var fuses_options,\n        airports_data,\n        _airports,\n        airportList,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fuses_options = _args.length > 1 && _args[1] !== undefined ? _args[1] : options; // Create a promise to handle airport data fetching from the RawGit\n\n            airports_data = new Promise(function (resolve) {\n              var FetchingFunction = function FetchingFunction() {\n                if (fetchTries) {\n                  console.log('I am waiting for another id to fetch the airports');\n\n                  if (!pending) {\n                    clearInterval(cron);\n                    resolve(airports);\n                  }\n                } else {\n                  fetchTries = true; // Call the fetch function passing the url of the API as a parameter\n\n                  fetch(AIRPORT_URL).then(function (response) {\n                    return response.json();\n                  }).then(function (data) {\n                    pending = false;\n                    airports = data;\n                    clearInterval(cron);\n                    resolve(data);\n                  });\n                }\n              };\n\n              var cron = setInterval(FetchingFunction, 500);\n            });\n\n            if (!(typeof airports === 'undefined' && pending)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return airports_data;\n\n          case 5:\n            airports = _context.sent;\n\n          case 6:\n            _airports = airports, airportList = _airports.airports;\n            (0, _airport.default)(id, airportList, options);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _AirportInput.apply(this, arguments);\n}\n\nwindow.AirportInput = AirportInput;","map":null,"metadata":{},"sourceType":"script"}